package tree

import (
	"fmt"
	"github.com/peterzeller/go-fun/iterable"
	"github.com/peterzeller/go-stateful-test/quickcheck/randomsource"
	"math/big"
	"strings"

	"github.com/peterzeller/go-fun/list/linked"
	"github.com/peterzeller/go-stateful-test/generator"
)

type MutableGenNode struct {
	// GeneratedValues stores the values generated by this node.
	// The values are grouped by iterations. For every call to hasMore, a new slice is added.
	GeneratedValues [][]GeneratedValue
	Rand            randomsource.RandomStream
	Seed            randomsource.RandomSource
}

type GeneratedValue struct {
	// Generator used to generate the value
	Generator generator.UntypedGenerator
	// Value that was generated (can be another node)
	Value generator.UR
}

func (v GeneratedValue) Size() *big.Int {
	return v.Generator.Size(v.Value)
}

func NewGenNode(r iterable.Iterable[byte]) *MutableGenNode {
	return &MutableGenNode{
		GeneratedValues: [][]GeneratedValue{{}},
		Rand:            r.Iterator(),
		Seed:            r,
	}
}

func (m *MutableGenNode) ToImmutable() *GenNode {
	generated := linked.FromIterable(
		iterable.Map(iterable.FromSlice(m.GeneratedValues),
			func(vs []GeneratedValue) *linked.List[GeneratedValue] {
				return linked.New(vs...)
			}))

	return &GenNode{
		generatedValues: generated,
	}
}

func (m *MutableGenNode) String() string {
	var s strings.Builder
	s.WriteString("MG[")
	for i, value := range m.GeneratedValues {
		if i > 0 {
			s.WriteString(", ")
		}
		s.WriteString("[")
		for j, v := range value {
			if j > 0 {
				s.WriteString(", ")
			}
			s.WriteString(fmt.Sprintf("%s: %v", v.Generator.Name(), v.Value))
		}
		s.WriteString("]")
	}
	s.WriteString("]")
	return s.String()
}

func (m *MutableGenNode) Size() *big.Int {
	var sum big.Int
	for _, values := range m.GeneratedValues {
		for _, value := range values {
			sum.Add(&sum, value.Size())
		}
	}
	return &sum
}
